source("~/Desktop/Files/nee_lab/DDM/tms/Results/analysis2.R")
source("~/Desktop/Files/nee_lab/DDM/tms3/Results/analysis2.R")
source("~/Desktop/Files/nee_lab/DDM/tms3/Results/analysis2.R")
# Load libraries
libraryBooks <- c("knitr", "tidyverse")
invisible(lapply(libraryBooks, require, character.only=TRUE)); rm(libraryBooks)
# Set paths
basePath <- "/Users/jongminlee/Desktop/Files/nee_lab/DDM/tms3/"
dataPath.3 <- paste0(basePath, "Results/")
dataPath.4 <- paste0(basePath, "Results/")
savePath <- paste0(basePath, "DataAnalysis/SavedResults/")
plotPath <- paste0(basePath, "DataAnalysis/Plots/")
# MCMC traces: Categorical
traces.cat <- bind_rows(
read_csv(paste0(dataPath.3, "m04_va_visit2_traces.csv")) %>%
mutate(study="tms", fair="visit2"),
read_csv(paste0(dataPath.3, "m04_va_visit3_traces.csv")) %>%
mutate(study="tms", fair="visit3"),
read_csv(paste0(dataPath.3, "m04_va_visit4_traces.csv")) %>%
mutate(study="tms", fair="visit4")) %>%
mutate(study = factor(study, levels=c("tms")),
fair = factor(fair, levels=c("visit2", "visit3", "visit4"))) %>%
select(study, fair,
vA = v_Intercept,
v0 = `v_C(cond, Treatment('Base'))[T.Delay]`,
v1 = `v_C(cond,  Treatment('Base'))[T.Dual]`,
v2 = `v_C(cond, Treatment('Base'))[T.Switch]`,
aA = a_Intercept,
a0 = `a_C(cond, Treatment('Base'))[T.Delay]`,
a1 = `a_C(cond, Treatment('Base'))[T.Dual]`,
a2 = `a_C(cond, Treatment('Base'))[T.Switch]`,
t) %>%
group_by(study, fair) %>%
nest() %>%
mutate(mapID = as.character(row_number()))
paste0(dataPath.3, "m04_va_visit2_traces.csv")
# MCMC traces: Categorical
traces.cat <- bind_rows(
read_csv(paste0(dataPath.3, "m04_va_visit2_traces.csv")) %>%
mutate(study="tms", fair="visit2"),
read_csv(paste0(dataPath.3, "m04_va_visit3_traces.csv")) %>%
mutate(study="tms", fair="visit3"),
read_csv(paste0(dataPath.3, "m04_va_visit4_traces.csv")) %>%
mutate(study="tms", fair="visit4")) %>%
mutate(study = factor(study, levels=c("tms")),
fair = factor(fair, levels=c("visit2", "visit3", "visit4"))) %>%
select(study, fair,
vA = v_Intercept,
v0 = `v_C(cond, Treatment('Base'))[T.Delay]`,
v1 = `v_C(cond, Treatment('Base'))[T.Dual]`,
v2 = `v_C(cond, Treatment('Base'))[T.Switch]`,
aA = a_Intercept,
a0 = `a_C(cond, Treatment('Base'))[T.Delay]`,
a1 = `a_C(cond, Treatment('Base'))[T.Dual]`,
a2 = `a_C(cond, Treatment('Base'))[T.Switch]`,
t) %>%
group_by(study, fair) %>%
nest() %>%
mutate(mapID = as.character(row_number()))
traces.cat[4]=as.character(c(1,2,3))
write_csv(traces.cat[[3]][[1]],
path=paste0(savePath, "traces_cat_visit2.csv"))
write_csv(traces.cat[[3]][[2]],
path=paste0(savePath, "traces_cat_visit3.csv"))
write_csv(traces.cat[[3]][[3]],
path=paste0(savePath, "traces_cat_visit4.csv"))
# parameter t-test
test.params <- function(df) {
inner_join(df %>%
map_dfr(mean) %>%
gather(parameter, estimate, everything()),
bind_rows(df %>%
map(~ .x > 0) %>%
map_dfr(mean) %>%
gather(parameter, pvalue, everything()) %>%
mutate(pvalue = if_else(round(pvalue)==1, 1-pvalue, pvalue),
sig = if_else(pvalue < 0.001, "***",
if_else(pvalue < 0.01, "**",
if_else(pvalue < 0.05, "*", "n.s."))))
)
)
}
# parameter paired test
save.param.cat <- map_dfr(traces.cat$data, test.params, .id="mapID") %>%
left_join(x=., y=traces.cat %>% select(-data)) %>%
select(mapID, study, fair, everything())
save.param.cat %>% kable()
write_csv(save.param.cat,
path=paste0(savePath, "param_est_cat.csv"))
test.pairwise <- function(df) {
df %>%
summarise(
vA0 = mean(vA > v0),
vA1 = mean(vA > v1),
vA2 = mean(vA > v2),
v01 = mean(v0 > v1),
v02 = mean(v0 > v2),
v12 = mean(v1 > v2),
aA0 = mean(aA > a0),
aA1 = mean(aA > a1),
aA2 = mean(aA > a2),
a01 = mean(a0 > a1),
a02 = mean(a0 > a2),
a12 = mean(a1 > a2)) %>%
gather(comparison, pvalue, everything()) %>%
mutate(pvalue = if_else(round(pvalue)==1, 1-pvalue, pvalue),
sig = if_else(pvalue < 0.001, "***",
if_else(pvalue < 0.01, "**",
if_else(pvalue < 0.05, "*", "n.s."))))
}
save.param.pairwise <- map_dfr(traces.cat$data, test.pairwise, .id="mapID") %>%
left_join(x=., y=traces.cat %>% select(-data)) %>%
select(mapID, study, fair, everything())
save.param.pairwise %>% kable()
write_csv(save.param.pairwise,
path=paste0(savePath, "param_pairwise.csv"))
# Prep bars (estimated parameter means) for plotting
plot.ddm.cat <- save.param.cat %>%
# Extract out the plotting variables
separate(parameter, c("parameter", "cond"), 1) %>%
# mutate(rev = if_else(parameter=="z", "A", rev)) %>%
group_by(study, fair, parameter) %>%
# Compute the mean of each bar
mutate(Mean = if_else(cond=="A", estimate, estimate+first(estimate))) %>%
ungroup()
write_csv(plot.ddm.cat,
path=paste0(savePath, "plot.ddm.cat.csv"))
# Prep pairwise comparisons for plotting
plot.pairwise.cat <- save.param.pairwise %>%
# Extract out the plotting variables
separate(comparison, c("parameter", "comparison"), 1) %>%
separate(comparison, c("cond1", "cond2"), 1)
write_csv(plot.pairwise.cat,
path=paste0(savePath, "plot.pairwise.cat.csv"))
